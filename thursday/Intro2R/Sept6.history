# generate random logFC data of 30 in length between -3 and 3
gene.expr$logFC <- runif(30, -3, 3)
# first three columns are required for plotting and one more column that corresponds to the data to plot
head(gene.expr)
data.col <- 6
track.num <- 6
side <- "in"
# "by.fold" is a zero or positive number. If it's positive, then any data point with a value >= by.fold will be plotted as red color; any data point with a value <= -by.fold will be plotted as blue color; otherwise, data point will be plotted in black color.
by.fold <- 1.5
# plot scatter plot
RCircos.Scatter.Plot(gene.expr, data.col, track.num, side, by.fold, is.sorted=FALSE)
# add extra tracks -- Line plot of Coverage results
genome.cov <- gene.label.data[-grep("ENSECAT", gene.label.data$Gene),]
colnames(genome.cov) <- c("chromosome", "start", "stop", "gene.name")
genome.cov$logCOV <- rnorm(dim(genome.cov)[1], 0, 0.9)
data.col <- 5
track.num <- 7
side <- "in"
RCircos.Line.Plot(genome.cov, data.col, track.num, side, is.sorted=FALSE)
# add most inside track -- link lines and ribbons.
# generate random translocation variants data
link.data <- data.frame(Chromosome=character(), chromStart=integer(), chromEnd=integer(), Chromosome.1=character(), chromStart.1=integer(), chromEnd.1=integer(), stringsAsFactors=F)
for (i in 1:15) {
n.rand <- floor(runif(1, 1,34))
chrom <- ideo$chrom[n.rand]
str <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
n.rand <- floor(runif(1, 1, 34))
chrom.1 <- ideo$chrom[n.rand]
str.1 <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed.1 <- str.1
if (ed < str) {
tmp <- ed
ed <- str
str <- tmp
}
link.data <- rbind(link.data, data.frame(Chromsome=chrom, chromStart=str, chromEnd=ed, Chromosome.1=chrom.1, chromStart.1=str.1, chromEnd.1=ed.1))
i <- i + 1
}
track.num <- 9
# plot link lines
RCircos.Link.Plot(link.data, track.num, TRUE, is.sorted=FALSE)
# ribbon data
ribbon.data <- link.data
colnames(ribbon.data) <- c("chromA", "chromStartA", "chromEndA", "chromB", "chromStartB", "chromEndB")
RCircos.Ribbon.Plot(ribbon.data=ribbon.data, track.num=9, by.chromosome=FALSE, twist=FALSE, is.sorted=FALSE)
chr.exclude <- NULL
cyto.info <- ideo
tracks.inside <- 10
tracks.outside <- 0
RCircos.Set.Core.Components(cyto.info, chr.exclude, tracks.inside, tracks.outside)
RCircos.Set.Plot.Area()
par(mai=c(0.25, 0.25, 0.25, 0.25));
plot.new();
plot.window(c(-2.5,2.5), c(-2.5, 2.5));
RCircos.Chromosome.Ideogram.Plot()
genes <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/ensGene.txt", sep="\t", header=F, stringsAsFactors=F)
anno <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/ensemblToGeneName.txt", sep="\t", header=F, stringsAsFactors=F)
idx <- match(genes$V2, anno$V1)
genes$anno <- unlist(lapply(1:dim(genes)[1], function(x){if (is.na(idx[x]) == "TRUE") {genes$V2[x]} else {anno$V2[idx[x]]}}))
# write out the gene label anntation file
write.table(genes[,c("V3","V5","V6","anno")], file="gene.label", sep="\t", row.names=F, col.names=F, quote=F)
gene.label.data <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/gene.label", sep="\t", header=F)
head(gene.label.data)
colnames(gene.label.data) <- c("Chromosome", "chromStart", "chromEnd", "Gene")
tmp.list <- gene.label.data[-grep("ENSECAT", gene.label.data$Gene),]
idx <- sample(1:dim(tmp.list)[1], 30, replace=F)
gene.list <- tmp.list[idx,]
name.col <- 4
side <- "in"
track.num <- 1
RCircos.Gene.Connector.Plot(gene.list, track.num, side)
track.num <- 2
RCircos.Gene.Name.Plot(gene.list, name.col, track.num, side)
RCircos.Get.Gene.Name.Plot.Parameters()
gene.list$CNV <- floor(runif(n=30, min=1, max=7))
data.col <- 5 # the CNV column
track.num <- 5
side <- "in"
RCircos.Histogram.Plot(gene.list, data.col, track.num, side, is.sorted=FALSE, min.value=-2)
gene.expr <- gene.list
colnames(gene.expr)
colnames(gene.expr) <- c("chromosome", "start", "stop", "gene.name", "CNV")
gene.expr$logFC <- runif(30, -3, 3)
data.col <- 6
track.num <- 6
side <- "in"
by.fold <- 1.5
RCircos.Scatter.Plot(gene.expr, data.col, track.num, side, by.fold, is.sorted=FALSE)
genome.cov <- gene.label.data[-grep("ENSECAT", gene.label.data$Gene),]
colnames(genome.cov) <- c("chromosome", "start", "stop", "gene.name")
genome.cov$logCOV <- rnorm(dim(genome.cov)[1], 0, 0.9)
data.col <- 5
track.num <- 7
side <- "in"
RCircos.Line.Plot(genome.cov, data.col, track.num, side, is.sorted=FALSE)
link.data <- data.frame(Chromosome=character(), chromStart=integer(), chromEnd=integer(), Chromosome.1=character(), chromStart.1=integer(), chromEnd.1=integer(), stringsAsFactors=F)
for (i in 1:15) {
n.rand <- floor(runif(1, 1,34))
chrom <- ideo$chrom[n.rand]
str <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
n.rand <- floor(runif(1, 1, 34))
chrom.1 <- ideo$chrom[n.rand]
str.1 <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed.1 <- str.1
if (ed < str) {
tmp <- ed
ed <- str
str <- tmp
}
link.data <- rbind(link.data, data.frame(Chromsome=chrom, chromStart=str, chromEnd=ed, Chromosome.1=chrom.1, chromStart.1=str.1, chromEnd.1=ed.1))
i <- i + 1
}
track.num <- 9
RCircos.Link.Plot(link.data, track.num, TRUE, is.sorted=FALSE)
ribbon.data <- link.data
colnames(ribbon.data) <- c("chromA", "chromStartA", "chromEndA", "chromB", "chromStartB", "chromEndB")
RCircos.Ribbon.Plot(ribbon.data=ribbon.data, track.num=9, by.chromosome=FALSE, twist=FALSE, is.sorted=FALSE)
slices <- c(8539874, 137816, 407312, 470210, 324538)
labels <- c("SNP", "MNP", "INS", "DEL", "COMPLEX")
pct <- round(slices/sum(slices)*100, digits=2)
labels <- paste(labels, pct)
labels <- paste(labels, "%", sep="")
pie(slices, labels=labels, col=rainbow(length(labels)), main="Different types of variants")
pie(slices, labels=labels, col=rainbow(length(labels)), main="Different types of variants")
#source("http://bioconductor.org/biocLite.R")
#biocLite("RCircos")
#biocLite("IdeoViz")
library(IdeoViz)
#source("http://bioconductor.org/biocLite.R")
#biocLite("RCircos")
#biocLite("IdeoViz")
library(IdeoViz)
library(RCircos)
ideo <- getIdeo("equCab2")
head(ideo)
chr.exclude <- NULL
chr.exclude <- NULL
cyto.info <- ideo
tracks.inside <- 10
tracks.outside <- 0
RCircos.Set.Core.Components(cyto.info, chr.exclude, tracks.inside, tracks.outside)
RCircos.Set.Plot.Area()
par(mai=c(0.25, 0.25, 0.25, 0.25))
plot.new()
plot.window(c(-2.5,2.5), c(-2.5, 2.5))
RCircos.Chromosome.Ideogram.Plot()
genes <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/ensGene.txt", sep="\t", header=F, stringsAsFactors=F)
anno <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/ensemblToGeneName.txt", sep="\t", header=F, stringsAsFactors=F)
idx <- match(genes$V2, anno$V1)
genes[1:3,]
anno[1:3,]
idx <- match(genes$V2, anno$V1)
genes$anno <- unlist(lapply(1:dim(genes)[1], function(x){if (is.na(idx[x]) == "TRUE") {genes$V2[x]} else {anno$V2[idx[x]]}}))
genes[1:3,]
write.table(genes[,c("V3","V5","V6","anno")], file="gene.label", sep="\t", row.names=F, col.names=F, quote=F)
gene.label.data <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-August-Variant-Analysis-Workshop/master/friday/Variant-Analysis-by-R/files/gene.label", sep="\t", header=F)
head(gene.label.data)
colnames(gene.label.data) <- c("Chromosome", "chromStart", "chromEnd", "Gene")
head(gene.label.data)
tmp.list <- gene.label.data[-grep("ENSECAT", gene.label.data$Gene),]
idx <- sample(1:dim(tmp.list)[1], 30, replace=F)
idx
gene.list <- tmp.list[idx,]
gene.list
side <- "in"
track.num <- 1
RCircos.Gene.Connector.Plot(gene.list, track.num, side)
track.num <- 2
name.col <- 4
RCircos.Gene.Name.Plot(gene.list, name.col, track.num, side)
RCircos.Get.Gene.Name.Plot.Parameters()
gene.list$CNV <- floor(runif(n=30, min=1, max=7))
gene.list
data.col <- 5
track.num <- 5
side <- "in"
RCircos.Histogram.Plot(gene.list, data.col, track.num, side, is.sorted=FALSE, min.value=-2)
gene.expr <- gene.list
colnames(gene.expr)
colnames(gene.expr) <- c("chromosome", "start", "stop", "gene.name", "CNV")
gene.expr$logFC <- runif(30, -3, 3)
head(gene.expr)
data.col <- 6
track.num <- 6
side <- "in"
by.fold <- 1.5
RCircos.Scatter.Plot(gene.expr, data.col, track.num, side, by.fold, is.sorted=FALSE)
genome.cov <- gene.label.data[-grep("ENSECAT", gene.label.data$Gene),]
head(genome.cov)
colnames(genome.cov) <- c("chromosome", "start", "stop", "gene.name")
genome.cov$logCOV <- rnorm(dim(genome.cov)[1], 0, 0.9)
head(genome.cov)
data.col <- 5
track.num <- 7
side <- "in"
RCircos.Line.Plot(genome.cov, data.col, track.num, side, is.sorted=FALSE)
link.data <- data.frame(Chromosome=character(), chromStart=integer(), chromEnd=integer(), Chromosome.1=character(), chromStart.1=integer(), chromEnd.1=integer(), stringsAsFactors=F)
for (i in 1:15) {
n.rand <- floor(runif(1, 1,34))
chrom <- ideo$chrom[n.rand]
str <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed <- floor(runif(1, ideo$chromStart[n.rand],
ideo$chromEnd[n.rand]))
n.rand <- floor(runif(1, 1, 34))
chrom.1 <- ideo$chrom[n.rand]
str.1 <- floor(runif(1, ideo$chromStart[n.rand], ideo$chromEnd[n.rand]))
ed.1 <- str.1
if (ed < str) {
tmp <- ed
ed <- str
str <- tmp
}
link.data <- rbind(link.data, data.frame(Chromsome=chrom, chromStart=str, chromEnd=ed, Chromosome.1=chrom.1, chromStart.1=str.1, chromEnd.1=ed.1))
i <- i + 1
}
head(link.data)
track.num <- 9
RCircos.Link.Plot(link.data, track.num, TRUE, is.sorted=FALSE)
ribbon.data <- link.data
colnames(ribbon.data) <- c("chromA", "chromStartA", "chromEndA", "chromB", "chromStartB", "chromEndB")
RCircos.Ribbon.Plot(ribbon.data=ribbon.data, track.num=9, by.chromosome=FALSE, twist=FALSE, is.sorted=FALSE)
#biocLite("devtools")
library(devtools)
library(qqman)
head(gwasResults)
manhattan(gwasResults)
manhattan(gwasResults, col=c("red", "blue", "green"))
manhattan(gwasResults, suggestiveline=-log10(1e-6), genomewideline=-log10(1e-8), col=c("red", "blue", "green"))
x <- c(1:50)
y <- 1 + sqrt(x)/2
plot(x,y)
plot(x, y, type="l")
lines(x=3)
lines(x, y)
dev.off()
lines(x, y)
lines(x, y, type="p")
plot(x, y)
lines(x, y, type="l")
x <- rnorm(1000)
hist(x, bins=10)
?hist()
hist(x, breaks=10)
hist(x, breaks=12)
hist(x)
dev.off()
hist(x)
hist(x, freq=FALSE)
hist(x)
hist(x, breaks=c(-3, -1, 0, 1, 3))
range(x)
hist(x, breaks=c(-4, -1, 0, 1, 4))
hist(x, breaks=seq(range(x)[1], range(x)[2], by=0.2))
hist(x, breaks=seq(range(x)[1]-1, range(x)[2], by=0.2))
range(x)[1]
range(x)[2]
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.2))
seq(range(x)[1]-1, range(x)[2]+1, by=0.2)
seq(range(x)[1], range(x)[2], by=0.2)
range(x)
?seq()
seq()
seq()
seq(range(x)[1], range(x)[2], by=0.5)
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.2))
q()
x <- rnorm(1000)
y <- 1 + x^2
save(list=c(x, y), file="test.RData")
save(list=c("x", "y"), file="test.RData")
q()
load("test.RData")
ls()
x
q()
ls)
ls()
ls(
q()
# assign number 150 to variable a.
a <- 150
a
# assign a number in scientific format to variable b.
b <- 3e-2
b
# assign a string "Professor" to variable title
title <- "Professor"
title
# assign a string "Hello World" to variable hello
hello <- "Hello World"
hello
# assign logical value "TRUE" to variable is_female
is_female <- TRUE
is_female
# assign logical value "FALSE" to variable is_male
is_male <- FALSE
is_male
# assign logical value to a variable by logical operation
age <- 20
is_adult <- age > 18
is_adult
age > 18
class(is_female)
# To check whether the variable is a specific type
is.numeric(hello)
is.numeric(a)
is.character(hello)
is.logical(is_female)
as.numeric(is_female)
as.numeric(is_male)
b
as.character(b)
as.numeric(as.character(b))
friend_ages <- c(21, 27, 26, 32)
friend_ages
friend_names <- c("Mina", "Ella", "Anna", "Cora")
friend_names
# assign names to a vector by specifying them
names(friend_ages) <- c("Mina", "Ella", "Anna", "Carla")
friend_ages
# assign names to a vector using another vector
names(friend_ages) <- friend_names
friend_ages
names(friend_ages)
friend_ages <- c(21, 27, 26, 32)
friend_ages
names(friend_ages)
names(friend_ages) <- friend_names
friend_ages
friend_ages <- c(Mina=21, Ella=27, Anna=26, Cora=32)
friend_ages
length(friend_ages)
friend_ages[2]
friend_ages["Ella"]
friend_ages[c(1,3)]
friend_ages[c("Mina", "Anna")]
# selecting elements of a vector by excluding some of them.
friend_ages[-3]
friend_ages
my_friends <- c("Mina", "Ella", "Anna", "Cora")
my_friends
has_child <- c("TRUE", "TRUE", "FALSE", "TRUE")
has_child
my_friends[has_child == "TRUE"]
test <- c("one", "two", 3)
test
col1 <- c(1,3,8,9)
col2 <- c(2,18,27,10)
col3 <- c(8,37,267,19)
my_matrix <- cbind(col1, col2, col3)
my_matrix
rownames(my_matrix) <- c("row1", "row2", "row3", "row4")
my_matrix
t(my_matrix)
ncol(my_matrix)
nrow(my_matrix)
dim(my_matrix)
my_matrix[1,3]
my_matrix
my_matrix["row1", "col3"]
my_matrix[1,]
my_matrix[,3]
my_matrix[col3 > 20,]
my_matrix
colnames(my_matrix) <- c("newcol1", "newcol2", "newcol3")
my_matrix
my_matrix * 3
log10(my_matrix)
apply(my_matrix, 1, mean)
friend_groups <- factor(c(1,2,1,2))
friend_groups
levels(friend_groups)
levels(friend_groups) <- c("best_friend", "not_best_friend")
friend_groups
levels(friend_groups) <- c("not_best_friend", "best_friend")
friend_groups
friend_groups <- factor(c("not_best_friend", "best_friend", "not_best_friend", "best_friend"))
friend_groups
friend_groups <- factor(c("not_best_friend", "best_friend", "not_best_friend", "best_friend"), levels=c("not_best_friend", "best_friend"))
friend_groups
summary(friend_groups)
table(friend_groups)
# creating a data frame using previously defined vectors
friends <- data.frame(name=friend_names, age=friend_ages, child=has_child)
friends
is.data.frame(friends)
is.data.frame(my_matrix)
class(my_matrix)
class(friends)
my_data <- as.data.frame(my_matrix)
class(my_data)
my_data
t(my_data)
friends["Mina",]
# The columns of a data frame can be referred to by the names of the columns
friends
friends$age
friends[friends$age > 26,]
friends[friends$child == "TRUE",]
friends$child
friends$Mina
test <- t(data.frame(row1=c(1,2,3), row2=c("yes", "no", "null")))
test
data.frame(row1=c(1,2,3), row2=c("yes", "no", "null"))
friends
friends["Mina",]
test <- t(friens)
test <- t(friends)
test
friends
test$Mina
class(test)
class(friends)
is.numeric(friends$age)
is.numeric(friends$name)
# select friends that are older than 26
subset(friends, age > 26)
# select the information of the ages of friends
subset(friends, select=age)
friends
# add a column that has the information on the marrital status of friends
friends$married <- c("YES", "YES", "NO", "YES")
friends
class(friend)
class(friends)
# add a column that has the information on the salaries of friends
cbind(friends, salary=c(4000, 8000, 2000, 6000))
rbind(friends, data.frame(name="Terry", age=39, child="NO", married="NO", salary=2000))
rbind(friends, data.frame(name="Terry", age=39, child="NO", married="NO"))
my_list <- list(mother="Sophia", father="John", sisters=c("Anna", "Emma"), sister_age=c(5, 10))
my_list
# names of elements in the list
names(my_list)
# number of elements in the list
length(my_list)
my_list$mother
my_list[["mother"]]
my_list[[1]]
my_list[[3]]
my_list[[3]][2]
getwd()
setwd("Jessie/Research/BioInfo/Courses/2018-September-Bioinformatics-Prerequisites/thursday/Intro2R/")
getwd("/Users/jli")
setwd("/Users/jli")
# There is a more convenient way to read files from the internet.
data <- read.table(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
head(data)
# Otherwise, you may read the file by providing the url to the read.csv() function.
data2 <- read.csv(file="https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2017-August-Variant-Analysis-Workshop/master/friday/Intro2R/raw_counts.csv", stringsAsFactors=F)
# To look at the file:
head(data2)
?read.table()
?write.table()
# To write to a file called "output.txt" in your current working directory.
write.table(data2[1:20,], file="output.txt", sep="\t", quote=F, row.names=T, col.names=T)
system("ls")
getwd()
dir()
get()
getwd()
getwd(x)
# to set a different working directory, use setwd
setwd("/Users/jli/Desktop")
setwd()
# to list all variables in the environment
ls()
# to create a vector from 2 to 3, usin increment of 0.1
seq(2, 3, by=0.1)
?seq()
str(data2)
?str()
?lapply()
data <- as.data.frame(matrix(rnorm(49), ncol=7), stringsAsFactors=F)
dim(data)
lapply(1:dim(data)[1], function(x){sum(data[x,])})
apply(data, MARGIN=1, sum)
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))})
sapply(1:dim(data)[1], function(x){log10(sum(data[x,]))}, simplify=FALSE)
library(knitr)
kable(data.frame(Description=c("Mean", "Standard deviation", "Variance", "Minimum", "Maximum", "Median", "Range of values: minimum and maximum", "Sample quantiles", "Generic function", "Interquartile range"), R_function=c("mean()", "sd()", "var()", "min()", "max()", "median()", "range()", "quantile()", "summary()", "IQR()"), stringsAsFactors=F), align='c')
apply(data, 2, mean)
x <- c(1:50)
y <- 1 + sqrt(x)/2
plot(x,y)
plot(x,y)
plot(x,y, type="l")
plot(x,y, type="l")
# plot both the points and lines
## first plot points
plot(x,y)
lines(x,y, type="l")
plot(x,y)
lines(x,y, type="l")
?lines()
boxplot(data, xlab="Sample ID", ylab="Raw Counts")
boxplot(data, xlab="Sample ID", ylab="Raw Counts")
x <- rnorm(1000)
boxplot(x)
boxplot(x)
hist(x)
hist(x)
?hist()
# use user defined break points
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
hist(x, breaks=seq(range(x)[1]-1, range(x)[2]+1, by=0.5))
# clear plotting device/area
dev.off()
?boxplot()
savehistory(file="Sept6.history")
